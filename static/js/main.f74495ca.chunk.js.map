{"version":3,"sources":["square.js","index.js"],"names":["Square","props","id","coor","useState","checked","setChecked","mined","setMined","value","setValue","checkSurrounding","x","parseInt","substring","y","totalMines","checkLeft","checkRight","checkBottom","checkTop","checkTopRight","checkBottomRight","checkTopLeft","checkBottomLeft","newY","newID","includes","newX","className","onClick","App","Board","gsap","timeline","board","Array","fill","map","setCoor","useEffect","num","total","mines","r","Math","floor","random","c","rc","push","setMines","row","i","key","column","j","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f74495ca.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function Square(props) {\r\n  let id = props.id;\r\n  let coor = props.coor;\r\n  let [checked, setChecked] = useState(false);\r\n  let [mined, setMined] = useState(false);\r\n  let [value, setValue] = useState(\"\");\r\n\r\n  const checkSquare = () => {\r\n    setChecked(true);\r\n\r\n    if (coor.includes(id)) {\r\n      setMined(true);\r\n    }\r\n\r\n    setValue(checkSurrounding());\r\n  };\r\n\r\n  const checkSurrounding = () => {\r\n    let x = parseInt(id.substring(0, 1), 10);\r\n    let y = parseInt(id.substring(1, 2), 10);\r\n\r\n    let totalMines = 0;\r\n\r\n    totalMines += checkLeft(x, y);\r\n    totalMines += checkRight(x, y);\r\n    totalMines += checkBottom(x, y);\r\n    totalMines += checkTop(x, y);\r\n    totalMines += checkTopRight(x, y);\r\n    totalMines += checkBottomRight(x, y);\r\n    totalMines += checkTopLeft(x, y);\r\n    totalMines += checkBottomLeft(x, y);\r\n\r\n    return totalMines;\r\n  };\r\n\r\n  const checkLeft = (x, y) => {\r\n    let newY = y - 1;\r\n    let newID = x + \"\" + newY;\r\n\r\n    if (newY < 0) {\r\n      return 0;\r\n    }\r\n\r\n    if (coor.includes(newID)) {\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n  const checkRight = (x, y) => {\r\n    let newY = y + 1;\r\n    let newID = x + \"\" + newY;\r\n\r\n    if (newY > 9) {\r\n      return 0;\r\n    }\r\n\r\n    if (coor.includes(newID)) {\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n  const checkTop = (x, y) => {\r\n    let newX = x - 1;\r\n    let newID = newX + \"\" + y;\r\n\r\n    if (newX < 0) {\r\n      return 0;\r\n    }\r\n\r\n    if (coor.includes(newID)) {\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n  const checkBottom = (x, y) => {\r\n    let newX = x + 1;\r\n    let newID = newX + \"\" + y;\r\n\r\n    if (newX > 9) {\r\n      return 0;\r\n    }\r\n\r\n    if (coor.includes(newID)) {\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n  const checkTopRight = (x, y) => {\r\n    let newY = y + 1;\r\n    let newX = x - 1;\r\n\r\n    let newID = newX + \"\" + newY;\r\n\r\n    if (newX < 0 || newY > 9) {\r\n      return 0;\r\n    }\r\n    if (coor.includes(newID)) {\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n  const checkBottomRight = (x, y) => {\r\n    let newY = y + 1;\r\n    let newX = x + 1;\r\n\r\n    let newID = newX + \"\" + newY;\r\n\r\n    if (newX > 9 || newY > 9) {\r\n      return 0;\r\n    }\r\n    if (coor.includes(newID)) {\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n  const checkBottomLeft = (x, y) => {\r\n    let newY = y - 1;\r\n    let newX = x + 1;\r\n\r\n    let newID = newX + \"\" + newY;\r\n    if (newX > 9 || newY < 0) {\r\n      return 0;\r\n    }\r\n    if (coor.includes(newID)) {\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n  const checkTopLeft = (x, y) => {\r\n    let newY = y - 1;\r\n    let newX = x - 1;\r\n\r\n    let newID = newX + \"\" + newY;\r\n\r\n    if (newX < 0 || newY < 0) {\r\n      return 0;\r\n    }\r\n    if (coor.includes(newID)) {\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={checked ? (mined ? \"box red\" : \"box green\") : \"box\"}\r\n      onClick={checkSquare}\r\n    >\r\n      {value}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./style.scss\";\n\nimport Square from \"./square\";\n\nimport { gsap } from \"gsap\";\n\n// stuck on adding red to specific box\n\nfunction App() {\n  return <Board />;\n}\n\nfunction Board() {\n  const timeline = gsap.timeline();\n\n  let board = Array(10)\n    .fill(0)\n    .map((x) => Array(10).fill(0));\n\n  let [coor, setCoor] = useState([]);\n\n  const setMines = (num) => {\n    let total = num;\n    let mines = [...coor];\n    while (total > 0) {\n      let r = Math.floor(Math.random() * 10);\n      let c = Math.floor(Math.random() * 10);\n\n      let rc = r + \"\" + c;\n\n      if (!mines.includes(rc)) {\n        total--;\n        mines.push(r + \"\" + c);\n      }\n    }\n\n    // if total mines === 0 , automatically click on its surrounding squares\n    setCoor(mines);\n  };\n\n  useEffect(() => {\n    setMines(10);\n  }, []);\n\n  return (\n    <div className=\"Board\">\n      {board.map((row, i) => {\n        return (\n          <div key={i} className=\"row\">\n            {row.map((column, j) => {\n              return (\n                <div key={j} className=\"column\">\n                  <Square\n                    id={i + \"\" + j}\n                    mines={true}\n                    checked={true}\n                    coor={coor}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}