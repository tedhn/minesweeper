{"version":3,"sources":["square.js","index.js"],"names":["Square","props","id","surroundingMines","window","addEventListener","e","preventDefault","key","className","show","mined","onMouseDown","buttons","checkSquare","flagSquare","flagged","App","Board","useState","Array","fill","map","x","board","setBoard","gameover","setGameover","setCoor","mineCount","setMineCount","setMines","num","total","mines","newBoard","r","Math","floor","random","c","rc","includes","push","y","totalMines","checkSurrounding","forEach","value","parseInt","substring","minesArr","checkLeft","checkRight","checkBottom","checkTop","checkTopRight","checkBottomRight","checkTopLeft","checkBottomLeft","newY","newID","newX","openSurrounding","temp","openLeft","openRight","openBottom","openTop","openTopRight","openBottomRight","openTopLeft","openBottomLeft","useEffect","onClick","row","i","column","j","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cdc0d10f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function Square(props) {\r\n  let id = props.id;\r\n  let surroundingMines = props.surroundingMines;\r\n\r\n  const check = (e) => {\r\n    if (e.buttons === 1) {\r\n      props.checkSquare(id);\r\n    } else {\r\n      props.flagSquare(id);\r\n    }\r\n  };\r\n\r\n  window.addEventListener(\"contextmenu\", (e) => {\r\n    e.preventDefault();\r\n  });\r\n\r\n  return (\r\n    <div\r\n      key={id}\r\n      className={props.show ? (props.mined ? \"box red\" : \"box green\") : \"box\"}\r\n      onMouseDown={check}\r\n    >\r\n      {props.show\r\n        ? props.mined\r\n          ? \"\"\r\n          : props.surroundingMines\r\n        : props.flagged\r\n        ? \"f\"\r\n        : \"\"}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./style.scss\";\n\nimport Square from \"./square\";\n\nimport { gsap } from \"gsap\";\n\n// stuck on adding red to specific box\n\nfunction App() {\n  return <Board />;\n}\n\nfunction Board() {\n  let [board, setBoard] = useState(\n    Array(10)\n      .fill(0)\n      .map((x) =>\n        Array(10).fill({\n          mined: false,\n          surroundingMines: 0,\n          show: false,\n          flagged: false,\n        })\n      )\n  );\n  let [gameover, setGameover] = useState(false);\n  let [coor, setCoor] = useState([]);\n  let text = \"Game Over\";\n  let [mineCount, setMineCount] = useState(10);\n\n  const setMines = (num) => {\n    let total = num;\n    let mines = [];\n    let newBoard = [...board];\n\n    // adding mines //\n    while (total > 0) {\n      let r = Math.floor(Math.random() * 10);\n      let c = Math.floor(Math.random() * 10);\n\n      let rc = r + \"\" + c;\n\n      if (!mines.includes(rc)) {\n        total--;\n        mines.push(r + \"\" + c);\n      }\n    }\n    setCoor(mines);\n\n    // calculating how many mines around it //\n    // keeping overwriting the true part with the false part // fixed\n    for (let x = 0; x < 10; x++) {\n      for (let y = 0; y < 10; y++) {\n        let totalMines = checkSurrounding(x, y, mines);\n        newBoard[x][y] = {\n          mined: false,\n          surroundingMines: totalMines,\n          show: false,\n          flagged: false,\n        };\n      }\n    }\n\n    mines.forEach((value) => {\n      let r = parseInt(value.substring(0, 1), 10);\n      let c = parseInt(value.substring(1, 2), 10);\n      newBoard[r][c] = {\n        mined: true,\n        surroundingMines: newBoard[r][c].surroundingMines,\n        show: false,\n        flagged: false,\n      };\n    });\n\n    setBoard(newBoard);\n  };\n\n  const checkSurrounding = (x, y, minesArr) => {\n    let totalMines = 0;\n\n    totalMines += checkLeft(x, y, minesArr);\n    totalMines += checkRight(x, y, minesArr);\n    totalMines += checkBottom(x, y, minesArr);\n    totalMines += checkTop(x, y, minesArr);\n    totalMines += checkTopRight(x, y, minesArr);\n    totalMines += checkBottomRight(x, y, minesArr);\n    totalMines += checkTopLeft(x, y, minesArr);\n    totalMines += checkBottomLeft(x, y, minesArr);\n\n    return totalMines;\n  };\n\n  // checking surrouding mines //\n\n  const checkLeft = (x, y, minesArr) => {\n    let newY = y - 1;\n    let newID = x + \"\" + newY;\n\n    if (newY < 0) {\n      return 0;\n    }\n\n    if (minesArr.includes(newID)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n  const checkRight = (x, y, minesArr) => {\n    let newY = y + 1;\n    let newID = x + \"\" + newY;\n\n    if (newY > 9) {\n      return 0;\n    }\n\n    if (minesArr.includes(newID)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n  const checkTop = (x, y, minesArr) => {\n    let newX = x - 1;\n    let newID = newX + \"\" + y;\n\n    if (newX < 0) {\n      return 0;\n    }\n\n    if (minesArr.includes(newID)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n  const checkBottom = (x, y, minesArr) => {\n    let newX = x + 1;\n    let newID = newX + \"\" + y;\n\n    if (newX > 9) {\n      return 0;\n    }\n\n    if (minesArr.includes(newID)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n  const checkTopRight = (x, y, minesArr) => {\n    let newY = y + 1;\n    let newX = x - 1;\n\n    let newID = newX + \"\" + newY;\n\n    if (newX < 0 || newY > 9) {\n      return 0;\n    }\n    if (minesArr.includes(newID)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n  const checkBottomRight = (x, y, minesArr) => {\n    let newY = y + 1;\n    let newX = x + 1;\n\n    let newID = newX + \"\" + newY;\n\n    if (newX > 9 || newY > 9) {\n      return 0;\n    }\n    if (minesArr.includes(newID)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n  const checkBottomLeft = (x, y, minesArr) => {\n    let newY = y - 1;\n    let newX = x + 1;\n\n    let newID = newX + \"\" + newY;\n    if (newX > 9 || newY < 0) {\n      return 0;\n    }\n    if (minesArr.includes(newID)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n  const checkTopLeft = (x, y, minesArr) => {\n    let newY = y - 1;\n    let newX = x - 1;\n\n    let newID = newX + \"\" + newY;\n\n    if (newX < 0 || newY < 0) {\n      return 0;\n    }\n    if (minesArr.includes(newID)) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  // opening surround Mines //\n  const openSurrounding = (x, y, temp) => {\n    openLeft(x, y, temp);\n    openRight(x, y, temp);\n    openBottom(x, y, temp);\n    openTop(x, y, temp);\n    openTopRight(x, y, temp);\n    openBottomRight(x, y, temp);\n    openTopLeft(x, y, temp);\n    openBottomLeft(x, y, temp);\n  };\n\n  const openLeft = (x, y, temp) => {\n    let newY = y - 1;\n    if (newY >= 0) {\n      if (temp[x][newY].show === false) {\n        temp[x][newY].show = true;\n        if (temp[x][newY].surroundingMines === 0) {\n          openSurrounding(x, newY, temp);\n        }\n      }\n    }\n  };\n  const openRight = (x, y, temp) => {\n    let newY = y + 1;\n\n    if (newY <= 9) {\n      if (temp[x][newY].show === false) {\n        temp[x][newY].show = true;\n        if (temp[x][newY].surroundingMines === 0) {\n          openSurrounding(x, newY, temp);\n        }\n      }\n    }\n  };\n  const openTop = (x, y, temp) => {\n    let newX = x - 1;\n\n    if (newX >= 0) {\n      if (temp[newX][y].show === false) {\n        temp[newX][y].show = true;\n        if (temp[newX][y].surroundingMines === 0) {\n          openSurrounding(newX, y, temp);\n        }\n      }\n    }\n  };\n  const openBottom = (x, y, temp) => {\n    let newX = x + 1;\n\n    if (newX <= 9) {\n      if (temp[newX][y].show === false) {\n        temp[newX][y].show = true;\n\n        if (temp[newX][y].surroundingMines === 0) {\n          openSurrounding(newX, y, temp);\n        }\n      }\n    }\n  };\n  const openTopRight = (x, y, temp) => {\n    let newY = y + 1;\n    let newX = x - 1;\n\n    if (newX >= 0 && newY <= 9) {\n      if (temp[newX][newY].show === false) {\n        temp[newX][newY].show = true;\n        if (temp[newX][newY].surroundingMines === 0) {\n          openSurrounding(newX, newY, temp);\n        }\n      }\n    }\n  };\n  const openBottomRight = (x, y, temp) => {\n    let newY = y + 1;\n    let newX = x + 1;\n\n    if (newX <= 9 && newY <= 9) {\n      if (temp[newX][newY].show === false) {\n        temp[newX][newY].show = true;\n        if (temp[newX][newY].surroundingMines === 0) {\n          openSurrounding(newX, newY, temp);\n        }\n      }\n    }\n  };\n  const openBottomLeft = (x, y, temp) => {\n    let newY = y - 1;\n    let newX = x + 1;\n\n    if (newX <= 9 && newY >= 0) {\n      if (temp[newX][newY].show === false) {\n        temp[newX][newY].show = true;\n        if (temp[newX][newY].surroundingMines === 0) {\n          openSurrounding(newX, newY, temp);\n        }\n      }\n    }\n  };\n  const openTopLeft = (x, y, temp) => {\n    let newY = y - 1;\n    let newX = x - 1;\n\n    if (newX >= 0 && newY >= 0) {\n      if (temp[newX][newY].show === false) {\n        temp[newX][newY].show = true;\n        if (temp[newX][newY].surroundingMines === 0) {\n          openSurrounding(newX, newY, temp);\n        }\n      }\n    }\n  };\n\n  const checkSquare = (id) => {\n    let x = parseInt(id.substring(0, 1), 10);\n    let y = parseInt(id.substring(1, 2), 10);\n    let temp = [...board];\n    let mines = mineCount;\n\n    if (temp[x][y].flagged) {\n      mines++;\n    }\n\n    temp[x][y].show = true;\n\n    if (temp[x][y].mined) {\n      setGameover(true);\n    } else if (temp[x][y].surroundingMines === 0) {\n      openSurrounding(x, y, temp);\n    }\n\n    setMineCount(mines);\n    setBoard(temp);\n  };\n\n  const flagSquare = (id) => {\n    let x = parseInt(id.substring(0, 1), 10);\n    let y = parseInt(id.substring(1, 2), 10);\n    let temp = [...board];\n    let mines = mineCount;\n\n    if (temp[x][y].flagged === true) {\n      temp[x][y].flagged = false;\n      mines++;\n    } else {\n      temp[x][y].flagged = true;\n      mines--;\n    }\n\n    setMineCount(mines);\n    setBoard(temp);\n  };\n\n  const resetGame = () => {\n    setGameover(false);\n    setCoor([]);\n    setBoard(\n      Array(10)\n        .fill(0)\n        .map((x) =>\n          Array(10).fill({\n            mined: false,\n            surroundingMines: 0,\n            show: false,\n            flagged: false,\n          })\n        )\n    );\n    setMines(10);\n  };\n\n  useEffect(() => {\n    setMines(10);\n  }, []);\n\n  return (\n    <div className=\"container\">\n      {/* <div className=\"difficulty\">\n        <div\n          onClick={() => {\n            setMines(10);\n          }}\n        >\n          Easy\n        </div>\n        <div\n          onClick={() => {\n            setDifficulty(2);\n          }}\n        >\n          Intermediate\n        </div>\n        <div\n          onClick={() => {\n            setDifficulty(3);\n          }}\n        >\n          Hard\n        </div>\n      </div> */}\n      <div className={gameover ? \"screen show\" : \"screen\"}>\n        <div className=\"title\">{text}</div>\n        <div className=\"button\" onClick={resetGame}>\n          Reset{\" \"}\n        </div>\n      </div>\n\n      <div className=\"Board\">\n        {board.map((row, i) => {\n          return (\n            <div key={i} className=\"row\">\n              {row.map((column, j) => {\n                return (\n                  <div key={j} className=\"column\">\n                    <Square\n                      id={i + \"\" + j}\n                      mined={board[i][j].mined}\n                      show={board[i][j].show}\n                      flagged={board[i][j].flagged}\n                      surroundingMines={board[i][j].surroundingMines}\n                      checkSquare={checkSquare}\n                      flagSquare={flagSquare}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n\n      <div className=\"counter\">Mines Left : {mineCount}</div>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}